  正则表达式是一种用来匹配字符串的强有力的武器。它的设计思想是用一种描述性的语言来给字符串定义一个规则，凡是符合规则的字符串，
我们就认为它“匹配”了，否则，该字符串就是不合法的。

当我们在Python中使用正则表达式时，re模块内部会干两件事情：
1.编译正则表达式，如果正则表达式的字符串本身不合法，会报错；
2.用编译后的正则表达式去匹配字符串.

常用：
\d : 可以匹配一个数字
\w : 可以匹配一个字母或数字
.  : 可以匹配任意字符
*  : 表示任意个字符（包括0个）
+  : 表示至少一个字符
?  : 表示0个或1个字符
{n} : 表示n个字符
{n,m} : 表示n-m个字符

进阶：
[0-9a-zA-Z\_] ：可以匹配一个数字、字母或者下划线；
[0-9a-zA-Z\_]+：可以匹配至少由一个数字、字母或者下划线组成的字符串，比如'a100'，'0_Z'，'Py3000'等等；
[a-zA-Z\_][0-9a-zA-Z\_]* ：可以匹配由字母或下划线开头，后接任意个由一个数字、字母或者下划线组成的字符串，也就是Python合法的变量；
[a-zA-Z\_][0-9a-zA-Z\_]{0, 19}更精确地限制了变量的长度是1-20个字符（前面1个字符+后面最多19个字符）。
A|B ：可以匹配A或B，所以(P|p)ython可以匹配'Python'或者'python'
^ ：表示行的开头，^\d表示必须以数字开头。
$ ：表示行的结束，\d$表示必须以数字结束。

贪婪匹配：
正则匹配默认是贪婪匹配，也就是匹配尽可能多的字符。举例如下，匹配出数字后面的0：
>>> re.match(r'^(\d+)(0*)$', '102300').groups()
('102300', '')
由于\d+采用贪婪匹配，直接把后面的0全部匹配了，结果0*只能匹配空字符串了。
必须让\d+采用非贪婪匹配（也就是尽可能少匹配），才能把后面的0匹配出来，加个?就可以让\d+采用非贪婪匹配：
>>> re.match(r'^(\d+?)(0*)$', '102300').groups()
('1023', '00')
